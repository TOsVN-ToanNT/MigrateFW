//------------------------------------------------------------------------------
// <auto-generated>
//    このコードはテンプレートから生成されました。
//
//    このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//    このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tos.Web.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SampleEntities : DbContext
    {
        public SampleEntities()
            : base("name=SampleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Buhin> Buhin { get; set; }
        public DbSet<BuhinCalendar> BuhinCalendar { get; set; }
        public DbSet<FixedKentosho> FixedKentosho { get; set; }
        public DbSet<FixedMitsumori> FixedMitsumori { get; set; }
        public DbSet<Kentosho> Kentosho { get; set; }
        public DbSet<ma_maker> ma_maker { get; set; }
        public DbSet<Mitsumori> Mitsumori { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<Product> Product { get; set; }
        public DbSet<Shinsei> Shinsei { get; set; }
        public DbSet<Tenpu> Tenpu { get; set; }
        public DbSet<Torihiki> Torihiki { get; set; }
        public DbSet<tr_torihiki_buhin> tr_torihiki_buhin { get; set; }
        public DbSet<ShiharaiJoken> ShiharaiJoken { get; set; }
        public DbSet<MitsumoriDirect> MitsumoriDirect { get; set; }
    
        public virtual ObjectResult<sp_SelectMitsumori_Result> sp_SelectMitsumori(Nullable<int> cd_shiharai, Nullable<int> cd_torihiki, string nm_hinmei, Nullable<int> skip, Nullable<int> top, ObjectParameter allCount)
        {
            var cd_shiharaiParameter = cd_shiharai.HasValue ?
                new ObjectParameter("cd_shiharai", cd_shiharai) :
                new ObjectParameter("cd_shiharai", typeof(int));
    
            var cd_torihikiParameter = cd_torihiki.HasValue ?
                new ObjectParameter("cd_torihiki", cd_torihiki) :
                new ObjectParameter("cd_torihiki", typeof(int));
    
            var nm_hinmeiParameter = nm_hinmei != null ?
                new ObjectParameter("nm_hinmei", nm_hinmei) :
                new ObjectParameter("nm_hinmei", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectMitsumori_Result>("sp_SelectMitsumori", cd_shiharaiParameter, cd_torihikiParameter, nm_hinmeiParameter, skipParameter, topParameter, allCount);
        }
    }
}
